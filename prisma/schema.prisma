// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String    @unique
  emailVerified   DateTime?
  name            String
  image           String    @map("profilePicture")
  
  verified        Boolean?
  role            Role      @default(USER)

  posts           Post[]    @relation("Author") 
  accounts        Account[]
  sessions        Session[]
  published       Post[]    @relation("Published") 
}

enum Role {
  USER      // default type
  STUDENT   // Can suggest new posts
  EDITOR    // Can edit and approve posts
  MANAGER   // Can manage people
  TEACHER   // Teacher, can edit, approve, create and manage users
  ADMIN     // Can do everything
}

model Post {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime  @default(now())
  title       String    @db.VarChar(255)
  content     String?
  published   Boolean   @default(false)
  views       Int       @default(0)
  titleImage  String
  gallery     String[]  @default([])

  authorId    String    @db.Uuid
  author      User      @relation("Author", fields: [authorId], references: [id])

  publishedById String? @db.Uuid
  publishedBy User?     @relation("Published", fields: [publishedById], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String     @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String   @id @default(cuid())
  userId             String   @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}