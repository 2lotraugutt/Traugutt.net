generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String? @unique
  name  String
  login String  @unique @default("")
  image String  @default("/profilePicture.png") @map("profilePicture")

  roleTag String @default("USER")
  role    Role   @relation("Role", fields: [roleTag], references: [tag])

  class String?

  posts                  Post[]         @relation("Author")
  announcements          Announcement[]
  tags                   EventTag[]
  event                  Event[]        @relation("Event author")
  notification           Notification[]
  publishedPosts         Post[]         @relation("Published post")
  publishedAnnouncements Announcement[] @relation("Published announcement")
  pinnedPosts            Post[]         @relation("Pinned")
  editedPosts            Post[]         @relation("Edited")
}

model Role {
  tag   String @id @unique
  name  String
  users User[] @relation("Role")

  createPosts         Boolean @default(false)
  publishPosts        Boolean @default(false)
  managePosts         Boolean @default(false)
  manageUsers         Boolean @default(false)
  manageEvents        Boolean @default(false)
  manageCalendar      Boolean @default(false)
  manageNumbers       Boolean @default(false)
  managePages         Boolean @default(false)
  manageNotifications Boolean @default(false)
  addAnnouncements    Boolean @default(false)
  manageAnnouncements Boolean @default(false)
  manageRoles         Boolean @default(false)
  manageTeachers      Boolean @default(false)
}

model Post {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  title      String   @db.VarChar(255)
  content    String?
  published  Boolean  @default(false)
  pinned     Boolean  @default(false)
  views      Int      @default(0)
  titleImage String
  gallery    String[] @default([])

  authorId String @db.Uuid
  author   User   @relation("Author", fields: [authorId], references: [id])

  publishedById String? @db.Uuid
  publishedBy   User?   @relation("Published post", fields: [publishedById], references: [id])

  pinnedById String? @db.Uuid
  pinnedBy   User?   @relation("Pinned", fields: [pinnedById], references: [id])

  editedById String? @db.Uuid
  editedBy   User?   @relation("Edited", fields: [editedById], references: [id])

  eventId String? @unique @db.Uuid
  event   Event?  @relation("Event", fields: [eventId], references: [id])
}

model Day {
  date      String   @id @unique
  number    Int?
  freeDay   Boolean  @default(false)
  day       Int
  month     Int
  year      Int
  timeStamp DateTime

  announcements Announcement[]
  events        Event[]        @relation("Day")
}

model Event {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now())
  name        String
  description String?
  date        String

  day Day @relation("Day", fields: [date], references: [date])

  tags EventTag[]

  authorId String @db.Uuid
  author   User   @relation("Event author", fields: [authorId], references: [id])

  post Post? @relation("Event")
}

model EventTag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  name      String
  color     String

  events   Event[]
  authorId String  @db.Uuid
  author   User    @relation(fields: [authorId], references: [id])
}

model Notification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  title     String
  content   String
  pinned    Boolean  @default(false)

  authorId String @db.Uuid
  author   User   @relation(fields: [authorId], references: [id])
}

model Route {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  createdAt DateTime      @default(now())
  name      String
  link      String
  category  RouteCategory @default(docs)
  index     Int           @default(autoincrement())
}

enum RouteCategory {
  school
  student
  parents
  recruitation
  exam
  trips
  docs
}

model Announcement {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime @default(now())
  published     Boolean  @default(false)
  content       String
  days          Day[]
  publishedById String?  @db.Uuid
  publishedBy   User?    @relation("Published announcement", fields: [publishedById], references: [id])

  authorId String @db.Uuid
  author   User   @relation(fields: [authorId], references: [id])
}

model Teacher {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now())
  title       String?
  name        String
  lastName    String
  email       String?
  image       String   @default("/teacherDefault.png")
  description String?
  subjects    String[]
  class       String?
}
